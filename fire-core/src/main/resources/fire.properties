#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# ----------------------------------------------- < fire 配置 > ------------------------------------------------ #
# 当前fire框架的版本号
fire.version                                                                  =       ${project.version}
# fire内置线程池大小
fire.thread.pool.size                                                         =       5
# fire内置定时任务线程池大小
fire.thread.pool.schedule.size                                                =       5
# 是否启用restful服务
fire.rest.enable                                                              =       true
# 用于设置是否做接口校验
fire.rest.filter.enable                                                       =       true
# 是否打印配置信息
fire.conf.show.enable                                                         =       true
# fire.conf.deploy.engine=className，在不同引擎实现模块中，指定具体可获取配置信息的EngineConf子类实现，用于同步配置到各container节点
# 是否打印restful地址
fire.rest.url.show.enable                                                     =       false
# 是否启用hostname作为rest服务的访问地址
fire.rest.url.hostname                                                        =       false
# 是否关闭fire内置的所有累加器
fire.acc.enable                                                               =       true
# 日志累加器开关
fire.acc.log.enable                                                           =       true
# 多值累加器开关
fire.acc.multi.counter.enable                                                 =       true
# 多时间维度累加器开关
fire.acc.multi.timer.enable                                                   =       true
# fire框架埋点日志开关，关闭以后将不再打印埋点日志
fire.log.enable                                                               =       true
# 用于限定fire框架中sql日志的字符串长度
fire.log.sql.length                                                           =       100
# 是否启用为connector注册shutdown hook，当jvm退出前close
fire.connector.shutdown_hook.enable                                           =       false
# fire框架针对jdbc操作后数据集的缓存策略
fire.jdbc.storage.level                                                       =       memory_and_disk_ser
# 通过JdbcConnector查询后将数据集放到多少个分区中，需根据实际的结果集做配置
fire.jdbc.query.partitions                                                    =       10
# 是否启用定时调度
fire.task.schedule.enable                                                     =       true
# 是否启用动态配置
fire.dynamic.conf.enable                                                      =       true
# fire框架rest接口服务最大线程数
fire.restful.max.thread                                                       =       8
# quartz最大线程池大小
fire.quartz.max.thread                                                        =       8
# fire收集日志保留的最少记录数
fire.acc.log.min.size                                                         =       500
# fire收集日志保留的最多记录数
fire.acc.log.max.size                                                         =       1000
# timer累加器保留最大的记录数
fire.acc.timer.max.size                                                       =       1000
# timer累加器清理几小时之前的记录
fire.acc.timer.max.hour                                                       =       12
# env累加器开关
fire.acc.env.enable                                                           =       true
# env累加器保留最多的记录数
fire.acc.env.max.size                                                         =       500
# env累加器保留最少的记录数
fire.acc.env.min.size                                                         =       100
# 定时调度任务黑名单，配置的value为定时任务方法名，多个以逗号分隔
fire.scheduler.blacklist                                                      =
# 配置打印黑名单，包含该配置将不被打印
fire.conf.print.blacklist                                                     =       .map.,pass,secret,zrc,connection,hdfs.ha,print.blacklist,yarn,namenode,metastore,address,redaction
# fire框架restful端口冲突重试次数
fire.restful.port.retry_num                                                   =       3
# fire框架restful端口冲突重试时间（ms）
fire.restful.port.retry_duration                                              =       1000
# 日志的级别，统一前缀为：fire.log.level.conf.
fire.log.level.conf.org.apache.spark                                          =       WARN
fire.log.level.conf.org.spark_project                                         =       WARN
fire.log.level.conf.org.apache.kafka                                          =       WARN
fire.log.level.conf.org.apache.zookeeper                                      =       WARN
fire.log.level.conf.com.zto.fire                                              =       INFO
fire.log.level.conf.org.eclipse.jetty.server                                  =       ERROR
# 是否将配置同步到executor、taskmanager端
fire.deploy_conf.enable                                                       =       true
# 每个jvm实例内部queue用于存放异常对象数最大大小，避免队列过大造成内存溢出
fire.exception_bus.size                                                       =       1000
# 是否开启数据源埋点
fire.buried_point.datasource.enable                                           =       true
# 用于存放埋点的队列最大大小，超过该大小将会被丢弃
fire.buried_point.datasource.max.size                                         =       200
# 定时解析埋点SQL的初始延迟（s）
fire.buried_point.datasource.initialDelay                                     =       30
# 定时解析埋点SQL的执行频率（s）
fire.buried_point.datasource.period                                           =       60
# 用于jdbc url的识别，当无法通过driver class识别数据源时，将从url中的端口号进行区分，不同数据配置使用统一的前缀：fire.buried_point.datasource.map.
fire.buried_point.datasource.map.tidb                                         =       4000
# 是否开启配置自适应前缀，自动为配置加上引擎前缀（spark.|flink.）
fire.conf.adaptive.prefix                                                     =       true
# 用户统一配置文件，允许用户在该配置文件中存放公共的配置信息，优先级低于任务配置文件（多个以逗号分隔）
fire.user.common.conf                                                         =       common.properties
# fire接口认证秘钥
fire.rest.server.secret                                                       =       fire
# 是否在调用shutdown方法时主动退出jvm进程
fire.shutdown.auto.exit                                                       =       false

# ----------------------------------------------- < kafka 配置 > ----------------------------------------------- #
# kafka集群名称与集群地址映射，任务中通过kafka.brokers.name=local即可连到以下配置的broker地址
# fire.kafka.cluster.map.local                                                =       localhost:9092,localhost02:9092

# ----------------------------------------------- < hive 配置 > ------------------------------------------------ #
# 默认的hive数据库
fire.hive.default.database.name                                               =       tmp
# 默认的hive分区字段名称
fire.hive.table.default.partition.name                                        =       ds
# 离线集群hive metastore地址（别名：local），任务中通过fire.hive.cluster=local即可连到一下配置的thrift地址
# fire.hive.cluster.map.local                                                 =       thrift://localhost:9083,thrift://localhost02:9083

# ----------------------------------------------- < HBase 配置 > ----------------------------------------------- #
# 一次读写HBase的数据量
fire.hbase.batch.size                                                         =       10000
# fire框架针对hbase操作后数据集的缓存策略
fire.hbase.storage.level                                                      =       memory_and_disk_ser
# 通过HBase scan后repartition的分区数，需根据scan后的数据量做配置
fire.hbase.scan.partitions                                                    =       -1
# 后续版本会废弃，废弃后fire.hbase.scan.partitions默认值改为1200
fire.hbase.scan.repartitions                                                  =       1200
# 是否开启HBase表存在判断的缓存，开启后表存在判断将避免大量的connection消耗
fire.hbase.table.exists.cache.enable                                          =       true
# 是否开启HBase表存在列表缓存的定时更新任务
fire.hbase.table.exists.cache.reload.enable                                   =       true
# 定时刷新缓存HBase表任务的初始延迟（s）
fire.hbase.table.exists.cache.initialDelay                                    =       60
# 定时刷新缓存HBase表任务的执行频率（s）
fire.hbase.table.exists.cache.period                                          =       600
# hbase集群的zk地址（别名：local），任务中通过hbase.cluster=local即可连到对应的hbase集群
# fire.hbase.cluster.map.local                                                =       localhost:2181,localhost02:2181

# hbase connection 配置，约定以：fire.hbase.conf.开头，比如：fire.hbase.conf.hbase.rpc.timeout对应hbase中的配置为hbase.rpc.timeout
fire.hbase.conf.hbase.zookeeper.property.clientPort                           =       2181
fire.hbase.conf.zookeeper.znode.parent                                        =       /hbase
fire.hbase.conf.hbase.rpc.timeout                                             =       600000
fire.hbase.conf.hbase.snapshot.master.timeoutMillis                           =       600000
fire.hbase.conf.hbase.snapshot.region.timeout                                 =       600000

# --------------------------------------------- <  配置中心配置  > --------------------------------------------- #
# 注：配置中心系统异常时可设置为false，不受配置中心影响，可正常发布和运行
fire.config_center.enable                                                     =       false
# 本地运行环境下（Windows、Mac）是否调用配置中心接口获取配置信息
fire.config_center.local.enable                                               =       false