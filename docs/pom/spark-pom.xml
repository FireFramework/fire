<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.zto.bigdata.spark</groupId>
  <artifactId>spark-demo</artifactId>
  <version>1.0-SNAPSHOT</version>
  <inceptionYear>2008</inceptionYear>

  <properties>
    <maven.scope>compile</maven.scope>
    <fire.version>2.3.3</fire.version>
    <hadoop.version>2.6.0</hadoop.version>
    <hive.version>1.1.0</hive.version>
    <hbase.version>1.2.0</hbase.version>
    <kudu.version>1.4.0</kudu.version>
    <impala.jdbc.version>2.5.30</impala.jdbc.version>
    <jackson.version>2.8.10</jackson.version>
    <guava.version>18.0</guava.version>
    <hudi.version>0.9.0</hudi.version>
    <rocketmq.version>4.8.0</rocketmq.version>

    <scala.binary.version>2.12</scala.binary.version>
    <scala.minor.version>13</scala.minor.version>
    <kafka.version>0.11.0.2</kafka.version>
    <sparkjava.version>2.8.0</sparkjava.version>
    <hive.group>org.apache.hive</hive.group>
    <rocketmq.version>4.8.0</rocketmq.version>
    <rocketmq.external.version>0.0.3</rocketmq.external.version>
    <mysql.version>5.1.49</mysql.version>
    <guava.version>18.0</guava.version>
    <curator.verrsion>2.6.0</curator.verrsion>
    <arthas.version>3.5.4</arthas.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <scala.version>${scala.binary.version}.${scala.minor.version}</scala.version>
    <spark.reference>${spark.version}_${scala.binary.version}</spark.reference>
  </properties>

  <repositories>
    <repository>
      <id>cloudera</id>
      <url>https://repository.cloudera.com/artifactory/cloudera-repos</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>aliyun</id>
      <url>https://maven.aliyun.com/repository/central</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>central</id>
      <url>https://mirrors.huaweicloud.com/repository/maven/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <profiles>
    <!-- spark profile -->
    <profile>
      <id>spark-3.0.2</id>
      <properties>
        <spark.version>3.0.2</spark.version>
        <spark.major.version>3.0</spark.major.version>
        <jackson.version>2.10.5</jackson.version>
        <scala.binary.version>2.12</scala.binary.version>
        <scala.minor.version>13</scala.minor.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.spark</groupId>
          <artifactId>spark-avro_${scala.binary.version}</artifactId>
          <version>${spark.version}</version>
          <scope>${maven.scope}</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.hudi</groupId>
          <artifactId>hudi-spark3_${scala.binary.version}</artifactId>
          <version>${hudi.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.spark</groupId>
          <artifactId>spark-hive_${scala.binary.version}</artifactId>
          <version>${spark.version}</version>
          <scope>${maven.scope}</scope>
          <exclusions>
            <exclusion>
              <groupId>org.apache.hive</groupId>
              <artifactId>hive-common</artifactId>
            </exclusion>
            <exclusion>
              <groupId>org.apache.hive</groupId>
              <artifactId>hive-exec</artifactId>
            </exclusion>
            <exclusion>
              <groupId>org.apache.hive</groupId>
              <artifactId>hive-metastore</artifactId>
            </exclusion>
            <exclusion>
              <groupId>org.apache.hive</groupId>
              <artifactId>hive-serde</artifactId>
            </exclusion>
            <exclusion>
              <groupId>org.apache.hive</groupId>
              <artifactId>hive-shims</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
        <dependency>
          <groupId>org.apache.spark</groupId>
          <artifactId>spark-hive-thriftserver_${scala.binary.version}</artifactId>
          <version>${spark.version}</version>
          <scope>${maven.scope}</scope>
          <exclusions>
            <exclusion>
              <groupId>org.apache.hive</groupId>
              <artifactId>hive-cli</artifactId>
            </exclusion>
            <exclusion>
              <groupId>org.apache.hive</groupId>
              <artifactId>hive-jdbc</artifactId>
            </exclusion>
            <exclusion>
              <groupId>org.apache.hive</groupId>
              <artifactId>hive-beeline</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
        <dependency>
          <groupId>${hive.group}</groupId>
          <artifactId>hive-cli</artifactId>
          <version>${hive.version}</version>
          <scope>${maven.scope}</scope>
        </dependency>
        <dependency>
          <groupId>${hive.group}</groupId>
          <artifactId>hive-jdbc</artifactId>
          <version>${hive.version}</version>
          <scope>${maven.scope}</scope>
        </dependency>
        <dependency>
          <groupId>${hive.group}</groupId>
          <artifactId>hive-beeline</artifactId>
          <version>${hive.version}</version>
          <scope>${maven.scope}</scope>
        </dependency>

        <dependency>
          <groupId>${hive.group}</groupId>
          <artifactId>hive-common</artifactId>
          <version>${hive.version}</version>
          <scope>${maven.scope}</scope>
        </dependency>
        <dependency>
          <groupId>${hive.group}</groupId>
          <artifactId>hive-metastore</artifactId>
          <version>${hive.version}</version>
          <scope>${maven.scope}</scope>
        </dependency>
        <dependency>
          <groupId>${hive.group}</groupId>
          <artifactId>hive-exec</artifactId>
          <version>${hive.version}</version>
          <scope>${maven.scope}</scope>
          <exclusions>
            <exclusion>
              <groupId>org.apache.commons</groupId>
              <artifactId>commons-lang3</artifactId>
            </exclusion>
            <exclusion>
              <groupId>org.apache.spark</groupId>
              <artifactId>spark-core_2.10</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
        <!-- hudi相关依赖 -->
        <dependency>
          <groupId>org.apache.hudi</groupId>
          <artifactId>hudi-spark-bundle_${scala.binary.version}</artifactId>
          <version>${hudi.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.hudi</groupId>
          <artifactId>hudi-spark-client</artifactId>
          <version>${hudi.version}</version>
        </dependency>

        <dependency>
          <groupId>org.apache.hudi</groupId>
          <artifactId>hudi-utilities-bundle_2.12</artifactId>
          <version>${hudi.version}</version>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>spark-2.3.2</id>
      <properties>
        <spark.version>2.3.2</spark.version>
        <spark.major.version>2.3</spark.major.version>
        <jackson.version>2.6.7</jackson.version>
        <scala.binary.version>2.11</scala.binary.version>
        <scala.minor.version>8</scala.minor.version>
      </properties>
    </profile>
  </profiles>

  <dependencies>
    <!-- 用于解决spark2.3在local模式下netty冲突问题 -->
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-all</artifactId>
      <version>${netty.version}</version>
      <scope>${maven.scope}</scope>
    </dependency>

    <!-- Fire框架相关依赖 -->
    <dependency>
      <groupId>com.zto.fire</groupId>
      <artifactId>fire-common_${scala.binary.version}</artifactId>
      <version>${fire.version}</version>
    </dependency>
    <dependency>
      <groupId>com.zto.fire</groupId>
      <artifactId>fire-core_${scala.binary.version}</artifactId>
      <version>${fire.version}</version>
    </dependency>
    <dependency>
      <groupId>com.zto.fire</groupId>
      <artifactId>fire-spark_${spark.reference}</artifactId>
      <version>${fire.version}</version>
    </dependency>
    <dependency>
      <groupId>com.zto.fire</groupId>
      <artifactId>fire-enhance-spark_${spark.reference}</artifactId>
      <version>${fire.version}</version>
    </dependency>
    <dependency>
      <groupId>com.zto.fire</groupId>
      <artifactId>fire-connector-spark-rocketmq_${spark.reference}</artifactId>
      <version>${fire.version}</version>
    </dependency>
    <dependency>
      <groupId>com.zto.fire</groupId>
      <artifactId>fire-connector-spark-hbase_${spark.reference}</artifactId>
      <version>${fire.version}</version>
    </dependency>
    <dependency>
      <groupId>com.zto.fire</groupId>
      <artifactId>fire-connector-hbase_${scala.binary.version}</artifactId>
      <version>${fire.version}</version>
    </dependency>
    <dependency>
      <groupId>com.zto.fire</groupId>
      <artifactId>fire-connector-jdbc_${scala.binary.version}</artifactId>
      <version>${fire.version}</version>
    </dependency>

    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-compiler</artifactId>
      <version>${scala.version}</version>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-reflect</artifactId>
      <version>${scala.version}</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.10.0</version>
      <scope>${maven.scope}</scope>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>2.10.0</version>
      <scope>${maven.scope}</scope>
    </dependency>

    <!-- spark相关依赖 -->
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-core_${scala.binary.version}</artifactId>
      <exclusions>
        <exclusion>
          <groupId>com.esotericsoftware.kryo</groupId>
          <artifactId>kryo</artifactId>
        </exclusion>
      </exclusions>
      <version>${spark.version}</version>
      <scope>${maven.scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-sql_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
      <scope>${maven.scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-streaming_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
      <scope>${maven.scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-hive_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
      <scope>${maven.scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-sql-kafka-0-10_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-streaming_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
      <scope>${maven.scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-streaming-kafka-0-10_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
    </dependency>

    <!-- hadoop相关依赖 -->
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
      <version>${hadoop.version}</version>
      <scope>${maven.scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-hdfs</artifactId>
      <version>${hadoop.version}</version>
      <scope>${maven.scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-client</artifactId>
      <version>${hadoop.version}</version>
      <scope>${maven.scope}</scope>
    </dependency>

    <!-- hbase相关依赖 -->
    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase-common</artifactId>
      <version>${hbase.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.apache.hbase</groupId>
          <artifactId>hbase-client</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase-server</artifactId>
      <version>${hbase.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.apache.hbase</groupId>
          <artifactId>hbase-client</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase-client</artifactId>
      <version>${hbase.version}</version>
    </dependency>

    <!-- rocketmq相关依赖 -->
    <dependency>
      <groupId>org.apache.rocketmq</groupId>
      <artifactId>rocketmq-client</artifactId>
      <version>${rocketmq.version}</version>
    </dependency>

    <!-- Hudi相关依赖 -->
    <dependency>
      <groupId>org.apache.hudi</groupId>
      <artifactId>hudi-spark-bundle_${scala.binary.version}</artifactId>
      <version>0.7.0</version>
      <scope>${maven.scope}</scope>
    </dependency>
    <dependency>
      <groupId>ru.yandex.clickhouse</groupId>
      <artifactId>clickhouse-jdbc</artifactId>
      <version>0.2.4</version>
      <scope>${maven.scope}</scope>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- ensure that we use JDK 1.6 -->
      <plugin>
        <inherited>true</inherited>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.scala-tools</groupId>
        <artifactId>maven-scala-plugin</artifactId>
        <version>2.15.2</version>
        <executions>
          <!-- Run scala compiler in the process-resources phase, so that dependencies
              on scala classes can be resolved later in the (Java) compile phase -->
          <execution>
            <id>scala-compile-first</id>
            <phase>process-resources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>

          <!-- Run scala compiler in the process-test-resources phase, so that
              dependencies on scala classes can be resolved later in the (Java) test-compile
              phase -->
          <execution>
            <id>scala-test-compile</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <!-- Add src/main/scala to source path of Eclipse -->
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/main/java</source>
                <source>src/main/scala</source>
                <source>src/main/java-spark-${spark.version}</source>
                <source>src/main/scala-spark-${spark.version}</source>
              </sources>
            </configuration>
          </execution>

          <!-- Add src/test/scala to test source path of Eclipse -->
          <execution>
            <id>add-test-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/test/scala</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- to generate Eclipse artifacts for projects mixing Scala and Java -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>2.10</version>
        <configuration>
          <downloadSources>true</downloadSources>
          <downloadJavadocs>true</downloadJavadocs>
          <projectnatures>
            <projectnature>org.scala-ide.sdt.core.scalanature</projectnature>
            <projectnature>org.eclipse.jdt.core.javanature</projectnature>
          </projectnatures>
          <buildcommands>
            <buildcommand>org.scala-ide.sdt.core.scalabuilder</buildcommand>
          </buildcommands>
          <classpathContainers>
            <classpathContainer>org.scala-ide.sdt.launching.SCALA_CONTAINER</classpathContainer>
            <classpathContainer>org.eclipse.jdt.launching.JRE_CONTAINER</classpathContainer>
          </classpathContainers>
          <excludes>
            <!-- in Eclipse, use scala-library, scala-compiler from the SCALA_CONTAINER
                rather than POM <dependency> -->
            <exclude>org.scala-lang:scala-library</exclude>
            <exclude>org.scala-lang:scala-compiler</exclude>
          </excludes>
          <sourceIncludes>
            <sourceInclude>**/*.scala</sourceInclude>
            <sourceInclude>**/*.java</sourceInclude>
          </sourceIncludes>
        </configuration>
      </plugin>

      <!-- When run tests in the test phase, include .java and .scala source
          files -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.19.1</version>
        <configuration>
          <includes>
            <include>**/*.java</include>
            <include>**/*.scala</include>
          </includes>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.4.2</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <filters>
            <filter>
              <artifact>*:*</artifact>
              <excludes>
                <exclude>META-INF/*.SF</exclude>
                <exclude>META-INF/*.DSA</exclude>
                <exclude>META-INF/*.RSA</exclude>
              </excludes>
            </filter>
          </filters>
          <finalName>zto-${project.artifactId}-${project.version}</finalName>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>