#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


# checkpoint\u76F8\u5173\u914D\u7F6E
# checkpoint\u9891\u7387\uFF0C-1\u8868\u793A\u5173\u95ED
flink.stream.checkpoint.interval                                                    =      -1
# EXACTLY_ONCE/AT_LEAST_ONCE
flink.stream.checkpoint.mode                                                        =      EXACTLY_ONCE
# checkpoint\u8D85\u65F6\u65F6\u95F4\uFF0C\u5355\u4F4D\uFF1A\u6BEB\u79D2
flink.stream.checkpoint.timeout                                                     =      600000
# \u540C\u65F6checkpoint\u64CD\u4F5C\u7684\u5E76\u53D1\u6570
flink.stream.checkpoint.max.concurrent                                              =      1
# \u4E24\u6B21checkpoint\u7684\u6700\u5C0F\u505C\u987F\u65F6\u95F4
flink.stream.checkpoint.min.pause.between                                           =      -1
# \u5982\u679C\u6709\u66F4\u8FD1\u7684checkpoint\u65F6\uFF0C\u662F\u5426\u5C06\u4F5C\u4E1A\u56DE\u9000\u5230\u8BE5\u68C0\u67E5\u70B9
flink.stream.checkpoint.prefer.recovery                                             =      false
# \u53EF\u5BB9\u5FCDcheckpoint\u5931\u8D25\u7684\u6B21\u6570\uFF0C\u9ED8\u8BA4\u4E0D\u5141\u8BB8\u5931\u8D25
flink.stream.checkpoint.tolerable.failure.number                                    =      0
# \u5F53cancel job\u65F6\u4FDD\u7559checkpoint
flink.stream.checkpoint.externalized                                                =      RETAIN_ON_CANCELLATION
# \u662F\u5426\u5F00\u542F\u975E\u5BF9\u9F50\u7684checkpoint
flink.stream.checkpoint.unaligned.enable                                            =      false
# \u8FD0\u884C\u6A21\u5F0F\uFF1ASTREAMING/BATCH/AUTOMATIC
# flink.runtime.mode                                                                =      STREAMING
# \u6307\u5B9A\u6D88\u8D39rocketmq\u7684\u8D77\u59CB\u6D88\u8D39\u4F4D\u70B9
flink.rocket.starting.offsets                                                       =      latest
# \u9ED8\u8BA4KeyedState\u7684ttl\u65F6\u95F4\uFF08\u8C03\u7528\u7AEF\u53EF\u8986\u76D6\uFF09
flink.state.ttl.days                                                                =      31
# \u5F53\u72B6\u6001\u83B7\u53D6\u8017\u65F6\u8D85\u8FC7\u8BE5\u9608\u503C\u65F6\u5C06\u8BB0\u5F55\u65E5\u5FD7\uFF0C\u5C0F\u4E8E1\u8868\u793A\u4E0D\u8BB0\u5F55\u65E5\u5FD7
flink.state.log.threshold                                                           =      50
# \u5F53\u72B6\u6001\u83B7\u53D6\u8017\u65F6\u8D85\u8FC7\u8BE5\u9608\u503C\u65F6\u5C06\u8BB0\u5F55\u65E5\u5FD7\u7684\u65E5\u5FD7\u6761\u6570\uFF0C\u5C0F\u4E8E1\u8868\u793A\u4E0D\u9650\u884C\u6570
flink.state.log.threshold.max_count                                                 =      300000
# \u662F\u5426\u81EA\u52A8\u5C06insert\u8BED\u53E5\u52A0\u5165\u5230StatementSet\u4E2D(StatementSet.addInsertSql)
flink.sql.auto.add.statementSet                                                     =      true

# flink\u672C\u5730\u78C1\u76D8\u72B6\u6001\u8DEF\u5F84\u9009\u62E9\u7B56\u7565\uFF1Adefault/round_robin\uFF0C\u9700\u8981\u4E0Eflink.state.external.zookeeper\u53C2\u6570\u914D\u5408\u4F7F\u7528
flink.state.choose.disk.policy                                                      =      default
# \u662F\u5426\u542F\u7528operatorChaining\uFF0C\u5982\u679C\u662Fdebug\u60C5\u51B5\u4E0B\uFF0C\u53EF\u7F6E\u4E3Afalse\uFF0C\u4FBF\u4E8E\u6392\u67E5\u95EE\u9898
flink.env.operatorChaining.enable                                                   =       true